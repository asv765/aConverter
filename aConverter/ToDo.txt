Варинты проверки:

* 1. В целевой БД существует код с режимом 10 (неизвестен). Вариант исправления - добавляется режим с кодом 10.
* 2. Сальдо на конец предыдущего месяца не совпадает с сальдо на начало текущего.
* 3. Сумма оплаты в файле OPLATA.DBF не совпадает с суммой оплаты в файле NACHOPL.DBF.
* 4. Проверка не неоднозначные значения (для одного кода разные расшифровки). Вариант исправления - 
устанавливает расшифровку в то значение, которое встречается чаще всех. Проверять:
    Errors :=  CheckUncertainty(''ABONENT'',''RayonKod'', ''RayonName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''ABONENT'',''TownsKod'', ''TownsName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''ABONENT'',''UlicaKod'', ''UlicaName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''ABONENT'',''CapCD'', ''CapName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''CHARS'',''CharCD'', ''CharName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''LCHARS'',''LCharCD'', ''LCharName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''LCHARS'',''Value'', ''ValueDesc'', ImportSubQuery);
    Errors :=  CheckUncertainty(''LGOTA'',''Lgota'', ''LgotaName'', ImportSubQuery);
    Errors :=  CheckUncertainty(''OPLATA'',''SourceCD'', ''SourceName'', ImportSubQuery);
* 5. Проверка и заполнение справочника районов (с установкой генератора).
* 6. Проверка и заполнение справочника населенных пунктов (с установкой генератора).
* 7. Проверка и заполнение справочника улиц (с установкой генератора).
* 8. Проверка и заполнение справочника районов города (с установкой генератора).
- 9. Проверка и заполнение справочника льгот (с установкой генератора).
- 10. Проверка и заполнение справочника льгот (с установкой генератора).
- 11. Проверка и заполнение справочника типов документов (с установкой генератора).
* 12. Проверка и заполнение справочника источников оплаты (с установкой генератора).
13. Проверка и заполнение справочника групповых счетчиков (с установкой генератора).
14. Проверка и заполнение справочника поставщиков информации (с установкой генератора).
- 15. Проверка и заполнение справочника типов документов на льготу (?).
16. Проверка и заполнение справочника типов договоров.
- 17. Проверка и заполнение справочника организаций, выдавших документы на льготу.
18. Проверка на уникальность лицевых счетов в таблице ABONENT.DBF.
19. Структура файлов для конвертации соответствует типовой структуре. 
19а. В файлах конвертации присутствуют все необходимые индексы.
20. Два одинаковые параметра на одну дату. Вообще дублирующиеся записи.
21. Проверять, что в таблицы Employees существует запись с кодом 1.


21. Разбить CheckCase проверки формата лицевого счета на те, которые обращаются к FDB базе и те,
которые не обращаются.
22. Развить концепцию классов вариантов проверки. Реализовать фильтрацию по классам.
23. Сохранять наборы настроек.


24. Добавить CheckCase на проверку , что на одну и ту же дату не могут быть два значения в CHARS, LCHARS.

25. Создать класс LshetGenerator для генерации лицевых счетов.
26. Создать класс CharsManager для заполнения файла Chars.DBF. Основные функции:
      - зарегистрировать новую характеристику в неком общем списке характеристик;
      - сохранить полученный список характеристик в заданный TableManager (tmdest).
27. Аналогично классу CharsManager создать класс LCharsManager.
28. Аналогично классам CharsManager, LCharsManager создать класс NachoplManager.


