//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace aConverterClassLibrary.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("aConverterClassLibrary.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$AADDCHAR (
        ///    ID INTEGER NOT NULL,
        ///    LSHET VARCHAR(10),
        ///    ADDCHARCD INTEGER,
        ///    &quot;VALUE&quot; VARCHAR(30),
        ///    primary key (ID));
        ///CREATE INDEX CNV$AADDCHAR_IDX1 ON CNV$AADDCHAR (LSHET);
        ///CREATE SEQUENCE GEN_CNV$AADDCHAR_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$AADDCHAR_BI FOR CNV$AADDCHAR
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$AADDCHAR_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///
        ///.
        /// </summary>
        internal static string CNV_AADDCHAR {
            get {
                return ResourceManager.GetString("CNV_AADDCHAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$AADDCHAR_BI;
        ///DROP SEQUENCE GEN_CNV$AADDCHAR_ID;
        ///DROP INDEX CNV$AADDCHAR_IDX1;
        ///DROP TABLE CNV$AADDCHAR;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_AADDCHAR_d {
            get {
                return ResourceManager.GetString("CNV_AADDCHAR_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /******************************************************************************/
        ////***               Generated by IBExpert 01.07.2015 18:30:24                ***/
        ////******************************************************************************/
        ///
        ////******************************************************************************/
        ////***      Following SET SQL DIALECT is just for the Database Comparer       ***/
        ////******************************************************************************/
        ////* SET SQL DIALECT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_ABONENT {
            get {
                return ResourceManager.GetString("CNV_ABONENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$ABONENT_BI;
        ///DROP SEQUENCE GEN_CNV$ABONENT_ID;
        ///DROP INDEX CNV$ABONENT_IDX1;
        ///DROP INDEX CNV$ABONENT_IDX2;
        ///DROP TABLE CNV$ABONENT;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_ABONENT_d {
            get {
                return ResourceManager.GetString("CNV_ABONENT_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE OR ALTER EXCEPTION CNV$WRONG_PARAMATER_VALUE &apos;Значение параметра не соответствует ожидаемому&apos;;
        ///.
        /// </summary>
        internal static string CNV_ADD_WRONG_PARAMETER_EXCEPTION {
            get {
                return ResourceManager.GetString("CNV_ADD_WRONG_PARAMETER_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_CCHARSDUPLICATION (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    ID integer,
        ///    LSHET varchar(10),
        ///    CHARCD integer,
        ///    CHARNAME varchar(50),
        ///    VALUE_ numeric(11,4),
        ///    DATE_ timestamp)
        ///as
        ///declare variable CURID integer;
        ///declare variable CURLSHET varchar(10);
        ///declare variable CURCHARCD integer;
        ///declare variable CURCHARNAME varchar(50);
        ///declare variable CURVALUE numeric(11,4);
        ///declare variable CURDATE timestamp;
        ///declare variable OLDLSHET varch [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_CCHARSDUPLICATION {
            get {
                return ResourceManager.GetString("CNV_CC_CCHARSDUPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_FIO (
        ///    ACTIONTYPE smallint = 0)
        ///returns (
        ///    LSHET varchar(10),
        ///    F varchar(50),
        ///    I varchar(50),
        ///    O varchar(50))
        ///as
        ///declare variable OCOUNT integer = 0;
        ///declare variable ICOUNT integer = 0;
        ///declare variable FCOUNT integer = 0;
        ///BEGIN
        ///  
        ///  IF (actiontype = 0) THEN BEGIN
        ///     SELECT COUNT(*) FROM cnv$abonent WHERE (f IS NOT NULL) AND (f &lt;&gt; &apos;&apos;) INTO :fcount;
        ///     SELECT COUNT(*) FROM cnv$abonent WHERE (i IS NOT NULL) AND (i &lt;&gt; &apos;&apos;) INTO :icount;
        ///     SEL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_FIO {
            get {
                return ResourceManager.GetString("CNV_CC_FIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_LCHARSDUPLICATION (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    ID integer,
        ///    LSHET varchar(10),
        ///    LCHARCD integer,
        ///    LCHARNAME varchar(100),
        ///    VALUE_ integer,
        ///    VALUEDESC varchar(100),
        ///    DATE_ timestamp)
        ///as
        ///declare variable CURID integer;
        ///declare variable CURLSHET varchar(10);
        ///declare variable CURLCHARCD integer;
        ///declare variable CURLCHARNAME varchar(100);
        ///declare variable CURVALUE integer;
        ///declare variable CURVALUEDESC varchar(100);
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_LCHARSDUPLICATION {
            get {
                return ResourceManager.GetString("CNV_CC_LCHARSDUPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_NACHNOTFOUNDINNACHOPL (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    DOCUMENTCD varchar(20),
        ///    MONTH_ smallint,
        ///    YEAR_ smallint,
        ///    FNATH numeric(18,4),
        ///    PROCHL numeric(18,4),
        ///    REGIMCD integer,
        ///    REGIMNAME varchar(50),
        ///    DATE_VV timestamp,
        ///    SERVICECD integer,
        ///    SERVICENAME varchar(50),
        ///    TYPE_ integer)
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, documentcd, month_, year_, fnath, prochl, date_vv [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NACHNOTFOUNDINNACHOPL {
            get {
                return ResourceManager.GetString("CNV_CC_NACHNOTFOUNDINNACHOPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_NACHOPLNACHMISMATCH (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    SERVICECD smallint,
        ///    YEAR_ smallint,
        ///    MONTH_ smallint,
        ///    NACHOPL_FNATH numeric(18,4),
        ///    NACH_FNATH numeric(18,4),
        ///    NACHOPL_PROCHL numeric(18,4),
        ///    NACH_PROCHL numeric(18,4))
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, servicecd, year_, month_, nachopl_fnath, nach_fnath, nachopl_prochl, nach_prochl
        ///    FROM cnv$cc_nachoplnachmismatch(1)
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NACHOPLNACHMISMATCH {
            get {
                return ResourceManager.GetString("CNV_CC_NACHOPLNACHMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_NACHOPLNACHNOTFOUND (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    SERVICECD integer,
        ///    YEAR_ smallint,
        ///    MONTH_ smallint,
        ///    FNATH numeric(18,4),
        ///    PROCHL numeric(18,4))
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, servicecd, year_, month_, fnath, prochl
        ///    FROM CNV$CC_NACHOPLNACHNOTFOUND(1)
        ///     INTO :lshet, :servicecd, :year_, :month_, :fnath, :prochl
        ///     DO BEGIN
        ///         SUSPEND;
        ///     END
        ///  END
        ///  ELSE IF [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NACHOPLNACHNOTFOUND {
            get {
                return ResourceManager.GetString("CNV_CC_NACHOPLNACHNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_NACHOPLOPLATAMISMATCH (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    SERVICECD smallint,
        ///    YEAR_ smallint,
        ///    MONTH_ smallint,
        ///    NACHOPL_OPLATA numeric(18,4),
        ///    OPLATA_SUM numeric(18,4))
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, servicecd, year_, month_, nachopl_oplata, oplata_sum
        ///    FROM cnv$cc_nachoploplatamismatch(1)
        ///    INTO :lshet, :servicecd, :year_, :month_, :nachopl_oplata, :oplata_sum
        ///    DO BEGIN
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NACHOPLOPLATAMISMATCH {
            get {
                return ResourceManager.GetString("CNV_CC_NACHOPLOPLATAMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///CREATE OR ALTER procedure CNV$CC_NACHOPLOPLATANOTFOUND (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    SERVICECD integer,
        ///    YEAR_ smallint,
        ///    MONTH_ smallint,
        ///    OPLATA numeric(18,4))
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, servicecd, year_, month_,  oplata
        ///    FROM CNV$CC_NACHOPLOPLATANOTFOUND(1)
        ///     INTO :lshet, :servicecd, :year_, :month_, :oplata
        ///     DO BEGIN
        ///         SUSPEND;
        ///     END
        ///  END
        ///  ELSE IF (actiontype = 1) THEN BEGIN
        ///    FO [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NACHOPLOPLATANOTFOUND {
            get {
                return ResourceManager.GetString("CNV_CC_NACHOPLOPLATANOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_NOTUNIQUENACHOPLSALDO (
        ///    ACTIONTYPE smallint = 0)
        ///returns (
        ///    LSHET varchar(10),
        ///    MONTH_ integer,
        ///    YEAR_ integer,
        ///    MONTH2 integer,
        ///    YEAR2 integer,
        ///    BDEBET numeric(18,4),
        ///    FNATH numeric(18,4),
        ///    PROCHL numeric(18,4),
        ///    OPLATA numeric(18,2),
        ///    EDEBET numeric(18,4),
        ///    SERVICECD integer,
        ///    SERVICENAME varchar(50))
        ///as
        ///begin
        ///  /* Тестирование, Диагностика */
        ///  if (ACTIONTYPE = 0 or ACTIONTYPE = 1 ) then begin
        ///     for select no1.LSHET [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_NOTUNIQUENACHOPLSALDO {
            get {
                return ResourceManager.GetString("CNV_CC_NOTUNIQUENACHOPLSALDO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_OLDNEWSALDOMISMATCH (
        ///    ACTIONTYPE smallint = 0,
        ///    SALDOCORRECTIONTYPE smallint = 0)
        ///returns (
        ///    LSHET varchar(10),
        ///    MONTH_ integer,
        ///    YEAR_ integer,
        ///    SERVICECD integer,
        ///    OLDEDEBET decimal(18,4),
        ///    BDEBET decimal(18,4))
        ///as
        ///declare variable OLDSERVICECD integer = 0;
        ///declare variable OLDLSHET varchar(10);
        ///declare variable EDEBET decimal(18,4);
        ///declare variable ISFIRSTROW smallint;
        ///declare variable FNATH decimal(18,4);
        ///declare  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_OLDNEWSALDOMISMATCH {
            get {
                return ResourceManager.GetString("CNV_CC_OLDNEWSALDOMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_OPLATANOTFOUNDINNACHOPL (
        ///    ACTIONTYPE smallint)
        ///returns (
        ///    LSHET varchar(10),
        ///    DOCUMENTCD varchar(20),
        ///    MONTH_ smallint,
        ///    YEAR_ smallint,
        ///    SUMMA numeric(18,4),
        ///    DATE_ timestamp,
        ///    DATE_VV timestamp,
        ///    SOURCECD integer,
        ///    SOURCENAME varchar(50),
        ///    SERVICECD integer,
        ///    SERVICENAME varchar(50))
        ///as
        ///BEGIN
        ///  IF (actiontype = 0) THEN BEGIN
        ///    FOR SELECT FIRST 1 lshet, documentcd, month_, year_, summa, date_, date_vv, sourcecd, sourcenam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_OPLATANOTFOUNDINNACHOPL {
            get {
                return ResourceManager.GetString("CNV_CC_OPLATANOTFOUNDINNACHOPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CC_SALDOHISTORYGAP (
        ///    ACTIONTYPE smallint = 0)
        ///returns (
        ///    LSHET varchar(10),
        ///    MONTH_ integer,
        ///    YEAR_ integer,
        ///    SERVICECD integer)
        ///as
        ///declare variable OLDSERVICECD integer;
        ///declare variable OLDLSHET varchar(10);
        ///declare variable CURRMONTH integer;
        ///declare variable CURRYEAR integer;
        ///declare variable QUERYMONTH integer;
        ///declare variable QUERYYEAR integer;
        ///declare variable EDEBET decimal(18,4);
        ///declare variable SERVICENAME varchar(50);
        ///BEGIN
        ///  /* Тестир [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CC_SALDOHISTORYGAP {
            get {
                return ResourceManager.GetString("CNV_CC_SALDOHISTORYGAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CHARLST (
        ///    ID INTEGER NOT NULL,
        ///    ADDCHARCD    INTEGER,
        ///    ADDCHARNAME  VARCHAR(50),
        ///    ADDCHTYPE    SMALLINT,
        ///    ADDCHARMODE  SMALLINT,
        ///    SHORTNAME    VARCHAR(50)
        ///);
        ///CREATE INDEX CNV$CHARLST_IDX1 ON CNV$CHARLST (ADDCHARCD);
        ///CREATE SEQUENCE GEN_CNV$CHARLST_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CHARLST_BI FOR CNV$CHARLST
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CHARLST_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///
        ///.
        /// </summary>
        internal static string CNV_CHARLST {
            get {
                return ResourceManager.GetString("CNV_CHARLST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CHARLST_BI;
        ///DROP SEQUENCE GEN_CNV$CHARLST_ID;
        ///DROP INDEX CNV$CHARLST_IDX1;
        ///DROP TABLE CNV$CHARLST;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CHARLST_d {
            get {
                return ResourceManager.GetString("CNV_CHARLST_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CHARS (
        ///  ID INTEGER NOT NULL,
        ///  LSHET VARCHAR(10),
        ///  CHARCD INTEGER,
        ///  CHARNAME VARCHAR(50),
        ///  VALUE_ NUMERIC(11,4),
        ///  DATE_ TIMESTAMP,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$CHARS_IDX1 ON CNV$CHARS (LSHET);
        ///CREATE SEQUENCE GEN_CNV$CHARS_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CHARS_BI FOR CNV$CHARS
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CHARS_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_CHARS {
            get {
                return ResourceManager.GetString("CNV_CHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CHARS_BI;
        ///DROP SEQUENCE GEN_CNV$CHARS_ID;
        ///DROP INDEX CNV$CHARS_IDX1;
        ///DROP TABLE CNV$CHARS;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CHARS_d {
            get {
                return ResourceManager.GetString("CNV_CHARS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CHARSHOUSES (
        ///  ID INTEGER NOT NULL,
        ///  HOUSECD INTEGER,
        ///  CHARCD INTEGER,
        ///  CHARNAME VARCHAR(50),
        ///  VALUE_ NUMERIC(11,4),
        ///  DATE_ TIMESTAMP,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$CHARSHOUSES_IDX1 ON CNV$CHARSHOUSES (HOUSECD);
        ///CREATE SEQUENCE GEN_CNV$CHARSHOUSES_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CHARSHOUSES_BI FOR CNV$CHARSHOUSES
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CHARSHOUSES_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_CHARSHOUSES {
            get {
                return ResourceManager.GetString("CNV_CHARSHOUSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CHARSHOUSES_BI;
        ///DROP SEQUENCE GEN_CNV$CHARSHOUSES_ID;
        ///DROP INDEX CNV$CHARSHOUSES_IDX1;
        ///DROP TABLE CNV$CHARSHOUSES;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CHARSHOUSES_d {
            get {
                return ResourceManager.GetString("CNV_CHARSHOUSES_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CHARVALS (
        ///  ID INTEGER NOT NULL,
        ///  ADDCHARCD INTEGER,
        ///  ADDCVALUE INTEGER,
        ///  ADDCNAME varchar(50),
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE SEQUENCE GEN_CNV$CHARVALS_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CHARVALS_BI FOR CNV$CHARVALS
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CHARVALS_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_CHARVALS {
            get {
                return ResourceManager.GetString("CNV_CHARVALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CHARVALS_BI;
        ///DROP SEQUENCE GEN_CNV$CHARVALS_ID;
        ///DROP TABLE CNV$CHARVALS;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CHARVALS_d {
            get {
                return ResourceManager.GetString("CNV_CHARVALS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CITIZENMIGRATION (
        ///  ID INTEGER NOT NULL,
        ///  CITIZENID INTEGER,
        ///  DATE_ TIMESTAMP,
        ///  MIGRATIONTYPE INTEGER,
        ///  DIRECTION INTEGER,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$CITIZENMIGRATION_IDX1 ON CNV$CITIZENMIGRATION (CITIZENID);
        ///CREATE SEQUENCE GEN_CNV$CITIZENMIGRATION_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CITIZENMIGRATION_BI FOR CNV$CITIZENMIGRATION
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CITIZENMIGRATION_ID,1);
        ///END
        ///^
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CITIZENMIGRATION {
            get {
                return ResourceManager.GetString("CNV_CITIZENMIGRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CITIZENMIGRATION_BI;
        ///DROP SEQUENCE GEN_CNV$CITIZENMIGRATION_ID;
        ///DROP INDEX CNV$CITIZENMIGRATION_IDX1;
        ///DROP TABLE CNV$CITIZENMIGRATION;
        ///.
        /// </summary>
        internal static string CNV_CITIZENMIGRATION_d {
            get {
                return ResourceManager.GetString("CNV_CITIZENMIGRATION_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CITIZENRELATIONS (
        ///  CITIZENIDFROM INTEGER,
        ///  CITIZENIDTO INTEGER,
        ///  RELATIONID INTEGER,
        ///  RELATIONNAME VARCHAR(20),
        ///  PRIMARY KEY (CITIZENIDFROM, CITIZENIDTO)
        ///);
        ///.
        /// </summary>
        internal static string CNV_CITIZENRELATIONS {
            get {
                return ResourceManager.GetString("CNV_CITIZENRELATIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE CNV$CITIZENRELATIONS;.
        /// </summary>
        internal static string CNV_CITIZENRELATIONS_d {
            get {
                return ResourceManager.GetString("CNV_CITIZENRELATIONS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CITIZENS (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10),
        ///  CITIZENID INTEGER,
        ///  F varchar(30),
        ///  I varchar(20),
        ///  O varchar(20),
        ///  BIRTHDATE timestamp,
        ///  STARTDATE timestamp,
        ///  ENDDATE timestamp,
        ///  LGOTA INTEGER,
        ///  LGOTANAME varchar(100),
        ///  DATWP timestamp,
        ///  DATUP timestamp,
        ///  DOCUMENTNAME varchar(50),
        ///  DOCTYPEID INTEGER,
        ///  SERIA varchar(20),
        ///  NOMER varchar(50),
        ///  DATDN timestamp,
        ///  DORGNAME varchar(1000),
        ///  DORGCD integer,
        ///  KOLLG INTEGER,
        ///  HOZ INTEGER,
        ///  BIRTHPLACE varchar(50),
        ///  SOB IN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CITIZENS {
            get {
                return ResourceManager.GetString("CNV_CITIZENS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CITIZENS_BI;
        ///DROP SEQUENCE GEN_CNV$CITIZENS_ID;
        ///DROP INDEX CNV$CITIZENS_IDX1;
        ///DROP TABLE CNV$CITIZENS;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CITIZENS_d {
            get {
                return ResourceManager.GetString("CNV_CITIZENS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CITYZENLGOTA (
        ///  ID INTEGER NOT NULL,
        ///  CITYZENID INTEGER NOT NULL,
        ///  LGOTACD INTEGER NOT NULL,
        ///  LGOTANAME VARCHAR(100),
        ///  STARTDATE TIMESTAMP,
        ///  ENDDATE TIMESTAMP,
        ///  PRIORITY INTEGER,
        ///  ISDELETED INTEGER, 
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$CITYZENLGOTA_IDX1 ON CNV$CITYZENLGOTA (CITYZENID);
        ///CREATE SEQUENCE GEN_CNV$CITYZENLGOTA_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CITYZENLGOTA_BI FOR CNV$CITYZENLGOTA
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL or NEW.ID = 0) THEN
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CITYZENLGOTA {
            get {
                return ResourceManager.GetString("CNV_CITYZENLGOTA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CITYZENLGOTA_BI;
        ///DROP SEQUENCE GEN_CNV$CITYZENLGOTA_ID;
        ///DROP INDEX CNV$CITYZENLGOTA_IDX1;
        ///DROP TABLE CNV$CITYZENLGOTA;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CITYZENLGOTA_d {
            get {
                return ResourceManager.GetString("CNV_CITYZENLGOTA_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$CNTRSIND (
        ///  ID INTEGER NOT NULL,
        ///  COUNTERID varchar(20),
        ///  DOCUMENTCD varchar(20),
        ///  OLDIND NUMERIC(16,4),
        ///  OB_EM NUMERIC(16,4),
        ///  INDICATION NUMERIC(16,4),
        ///  INDDATE TIMESTAMP,
        ///  INDTYPE INTEGER,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE SEQUENCE GEN_CNV$CNTRSIND_ID;
        ///CREATE INDEX CNV$CNTRSIND_IDX1 ON CNV$CNTRSIND (COUNTERID);
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$CNTRSIND_BI FOR CNV$CNTRSIND
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$CNTRSIND_ID,1);
        ///EN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNTRSIND {
            get {
                return ResourceManager.GetString("CNV_CNTRSIND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$CNTRSIND_BI;
        ///DROP SEQUENCE GEN_CNV$CNTRSIND_ID;
        ///DROP INDEX CNV$CNTRSIND_IDX1;
        ///DROP TABLE CNV$CNTRSIND;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_CNTRSIND_d {
            get {
                return ResourceManager.GetString("CNV_CNTRSIND_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00100_REGIONDISTRICTS
        ///as
        ///declare variable RAYONKOD integer;
        ///declare variable RAYONNAME varchar(50);
        ///declare variable CNT integer;
        ///BEGIN
        ///  FOR SELECT rayonkod, MAX(rayonname) AS rayonname, COUNT(*) AS cnt
        ///        FROM cnv$abonent
        ///        GROUP BY rayonkod
        ///        INTO :rayonkod, :rayonname, :cnt
        ///  DO BEGIN
        ///     UPDATE OR INSERT INTO regiondistricts (regiondistrictcd, regiondistrictnm)
        ///        VALUES (:rayonkod, :rayonname) MATCHING (regiondistrictcd);
        ///  END
        ///  E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00100_REGIONDISTRICTS {
            get {
                return ResourceManager.GetString("CNV_CNV_00100_REGIONDISTRICTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00150_SETTLEMENT
        ///as
        ///declare variable SETTLEMENTKOD integer;
        ///declare variable SETTLEMENTNAME varchar(200);
        ///declare variable cnt integer;
        ///BEGIN
        ///    FOR SELECT DISTINCT SETTLEMENTKOD, SETTLEMENTNAME
        ///        FROM cnv$abonent
        ///	where SETTLEMENTNAME is not null
        ///        ORDER BY SETTLEMENTKOD
        ///        INTO :SETTLEMENTKOD, :SETTLEMENTNAME
        ///    DO BEGIN
        ///       UPDATE OR INSERT INTO SETTLEMENTS (SETTLEMENTID, SETTLEMENTNAME)
        ///            VALUES (:SETTLEMENTKOD, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00150_SETTLEMENT {
            get {
                return ResourceManager.GetString("CNV_CNV_00150_SETTLEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00200_PUNKT
        ///as
        ///declare variable SETTLEMENTKOD integer;
        ///declare variable TOWNSKOD integer;
        ///declare variable RAYONKOD integer;
        ///declare variable TOWNSNAME varchar(50);
        ///declare variable CNT integer;
        ///BEGIN
        ///    FOR SELECT townskod, MAX(rayonkod) AS rayonkod, MAX(townsname) AS townsname, COUNT(*) AS cnt, MAX(SETTLEMENTKOD) as SETTLEMENTKOD
        ///        FROM cnv$abonent
        ///        GROUP BY townskod
        ///        ORDER BY townskod
        ///        INTO :townskod, :rayonkod, :townsname, :cnt, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00200_PUNKT {
            get {
                return ResourceManager.GetString("CNV_CNV_00200_PUNKT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00300_STREET
        ///as
        ///declare variable ULICAKOD integer;
        ///declare variable TOWNSKOD integer;
        ///declare variable ULICANAME varchar(100);
        ///declare variable CNT integer;
        ///BEGIN
        ///    FOR SELECT ulicakod, townskod, MAX(ulicaname) AS ulicaname, COUNT(*)
        ///        FROM cnv$abonent
        ///        GROUP BY ulicakod, townskod
        ///        INTO :ulicakod, :townskod, :ulicaname, :cnt
        ///    DO BEGIN
        ///        UPDATE OR INSERT INTO street (streetcd, punktcd, streetnm, note)
        ///            VALUES (:ulicakod [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00300_STREET {
            get {
                return ResourceManager.GetString("CNV_CNV_00300_STREET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00400_DISTRICT
        ///as
        ///declare variable TOWNSKOD integer;
        ///declare variable DISTKOD integer;
        ///declare variable DISTNAME varchar(50);
        ///declare variable CNT integer;
        ///BEGIN
        ///    FOR SELECT townskod, distkod, MAX(distname) AS distname, COUNT(*) AS cnt
        ///      FROM cnv$abonent
        ///	  where distkod is not null
        ///      GROUP BY townskod, distkod
        ///      INTO :townskod, :distkod, :distname, :cnt
        ///      DO BEGIN
        ///        UPDATE OR INSERT INTO DISTRICT (DISTCD, DISTNM, PUNKTCD)
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00400_DISTRICT {
            get {
                return ResourceManager.GetString("CNV_CNV_00400_DISTRICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00500_INFORMATIONOWNERS
        ///as
        ///declare variable DUCD integer;
        ///declare variable DUNAME varchar(100);
        ///declare variable CNT integer;
        ///BEGIN
        ///    FOR SELECT ducd, MAX(duname) AS duname, COUNT(*)
        ///    FROM cnv$abonent
        ///    GROUP BY ducd
        ///    INTO :ducd, :duname, :cnt
        ///    DO BEGIN
        ///        UPDATE OR INSERT INTO informationowners (ownerid, ownername)
        ///            VALUES (:ducd, :duname) MATCHING (ownerid);
        ///    END
        ///    EXECUTE STATEMENT &apos;ALTER SEQUENCE INFORMATIONOWNERS_G RESTAR [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00500_INFORMATIONOWNERS {
            get {
                return ResourceManager.GetString("CNV_CNV_00500_INFORMATIONOWNERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00600_HOUSES
        ///as
        ///declare variable HOUSECD integer;
        ///declare variable DISTKOD integer;
        ///declare variable ULICAKOD integer;
        ///declare variable TOWNSKOD integer;
        ///declare variable HOUSENO varchar(10);
        ///declare variable HOUSEPOSTFIX varchar(30);
        ///declare variable KORPUSNO integer;
        ///declare variable KORPUSPOSTFIX varchar(30);
        ///declare variable CNT integer;
        ///declare variable POSTINDEX varchar(10);
        ///declare variable HOUSENOTE varchar(4000);
        ///BEGIN
        ///    FOR SELECT housecd, distkod, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00600_HOUSES {
            get {
                return ResourceManager.GetString("CNV_CNV_00600_HOUSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00700_ABONENTS
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable DUCD integer;
        ///declare variable HOUSECD integer;
        ///declare variable FLATNO integer;
        ///declare variable FLATPOSTFIX varchar(10);
        ///declare variable ROOMNO integer;
        ///declare variable ROOMPOSTFIX varchar(10);
        ///declare variable F varchar(100);
        ///declare variable I varchar(50);
        ///declare variable O varchar(50);
        ///declare variable PHONENUM varchar(100);
        ///declare variable PRIM_ varchar(250);
        ///decla [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00700_ABONENTS {
            get {
                return ResourceManager.GetString("CNV_CNV_00700_ABONENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00800_CHARS (
        ///    NEEDDELETE smallint = 0,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable OLDLSHET varchar(10);
        ///declare variable CHARCD integer;
        ///declare variable VALUE_ numeric(11,4);
        ///declare variable DATE_ timestamp;
        ///declare variable DOCUMENTCD integer;
        ///BEGIN
        ///    IF (needdelete = 1) THEN BEGIN
        ///        DELETE FROM ccharsdoublevalues WHERE lshet IN (SELECT lshet FROM cnv$chars);
        ///        DELETE FROM documents WHERE documentcd [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00800_CHARS {
            get {
                return ResourceManager.GetString("CNV_CNV_00800_CHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00850_CHARSHOUSES (
        ///    NEEDDELETE smallint = 0,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable HOUSECD integer;
        ///declare variable CHARCD integer;
        ///declare variable VALUE_ numeric(11,4);
        ///declare variable DATE_ timestamp;
        ///declare variable DOCUMENTCD integer;
        ///begin
        ///  if (NEEDDELETE = 1) then
        ///  begin
        ///    delete from CCHARSHOUSELIST
        ///    where HOUSECD in (select HOUSECD
        ///                      from CNV$CHARSHOUSES);
        ///    delete from DOCUMENTS
        ///    where [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00850_CHARSHOUSES {
            get {
                return ResourceManager.GetString("CNV_CNV_00850_CHARSHOUSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00855_LCHARSHOUSES (
        ///    NEEDDELETE smallint = 0,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable HOUSECD integer;
        ///declare variable CHARCD integer;
        ///declare variable VALUE_ integer;
        ///declare variable DATE_ timestamp;
        ///declare variable DOCUMENTCD integer;
        ///begin
        ///  if (NEEDDELETE = 1) then
        ///  begin
        ///    delete from lcharshouselist
        ///    where HOUSECD in (select HOUSECD
        ///                      from cnv$LCHARHOUSES);
        ///    delete from DOCUMENTS
        ///    where DOCU [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00855_LCHARSHOUSES {
            get {
                return ResourceManager.GetString("CNV_CNV_00855_LCHARSHOUSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00900_LCHARS (
        ///    NEEDDELETE smallint = 0,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable OLDLSHET varchar(10);
        ///declare variable LCHARCD integer;
        ///declare variable VALUE_ integer;
        ///declare variable DATE_ timestamp;
        ///declare variable DOCUMENTCD integer;
        ///BEGIN
        ///    IF (needdelete = 1) THEN BEGIN
        ///        DELETE FROM lcharsdoublevalues WHERE lshet IN (SELECT lshet FROM cnv$lchars);
        ///        DELETE FROM documents WHERE documentcd IN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00900_LCHARS {
            get {
                return ResourceManager.GetString("CNV_CNV_00900_LCHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_00950_COUNTERSTYPES
        ///as
        ///declare variable CNTTYPE integer;
        ///declare variable CNTNAME varchar(50);
        ///declare variable CNT integer;
        ///BEGIN
        ///    FOR SELECT cnttype, MAX(cntname) AS cntname, COUNT(*)
        ///        FROM cnv$counters
        ///        GROUP BY cnttype
        ///        INTO :cnttype, :cntname, :cnt
        ///    DO BEGIN
        ///        UPDATE OR INSERT INTO counterstypes (kod, equipmenttypeid, periodkod, name, coefficient, digitcount, equipmentgroupid, extorgcd, dimensiontype, minconsumption, maxco [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_00950_COUNTERSTYPES {
            get {
                return ResourceManager.GetString("CNV_CNV_00950_COUNTERSTYPES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01000_COUNTERS (
        ///    NEEDDELETE smallint = 0,
        ///    GENERATECD smallint = 1,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable COUNTERID varchar(20);
        ///declare variable CNTTYPE integer;
        ///declare variable SERIALNUM varchar(30);
        ///declare variable SETUPDATE timestamp;
        ///declare variable DEACTDATE timestamp;
        ///declare variable SETUPPLACE integer;
        ///declare variable PLOMBNAME varchar(40);
        ///declare variable PLOMBDATE timestamp;
        ///d [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01000_COUNTERS {
            get {
                return ResourceManager.GetString("CNV_CNV_01000_COUNTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01050_GROUPCOUNTERS (
        ///    NEEDDELETE smallint = 0,
        ///    GENERATECD smallint = 1,
        ///	GENCHANGEDOC smallint = 1)
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable COUNTERID varchar(20);
        ///declare variable CNTTYPE integer;
        ///declare variable SERIALNUM varchar(30);
        ///declare variable SETUPDATE timestamp;
        ///declare variable DEACTDATE timestamp;
        ///declare variable SETUPPLACE integer;
        ///declare variable PLOMBNAME varchar(40);
        ///declare variable PLOMBDATE timestam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01050_GROUPCOUNTERS {
            get {
                return ResourceManager.GetString("CNV_CNV_01050_GROUPCOUNTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01100_COUNTERTYPES
        ///as
        ///begin
        ///    INSERT INTO COUNTERSTYPES (KOD, EQUIPMENTTYPEID, PERIODKOD, NAME, COEFFICIENT, DIGITCOUNT, EQUIPMENTGROUPID, EXTORGCD, DIMENSIONTYPE, MINCONSUMPTION, MAXCONSUMPTION, MINTEMPERATURE, MAXTEMPERATURE, COUNTERMARKMODULEID, SERVICELIFEID, ACCURACY)
        ///    select ID, EQUIPMENTTYPEID, PERIODKOD, NAME, COEFFICIENT, DIGITCOUNT, EQUIPMENTGROUPID, EXTORGCD, DIMENSIONTYPE, MINCONSUMPTION, MAXCONSUMPTION, MINTEMPERATURE, MAXTEMPERATURE, COUNTER [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01100_COUNTERTYPES {
            get {
                return ResourceManager.GetString("CNV_CNV_01100_COUNTERTYPES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01300_SOURCEDOC
        ///as
        ///declare variable CNT integer;
        ///declare variable SOURCENAME varchar(50);
        ///declare variable SOURCECD integer;
        ///begin
        ///  FOR SELECT sourcecd, MAX(sourcename) as sourcename
        ///    FROM cnv$oplata
        ///    GROUP BY sourcecd
        ///    INTO :sourcecd, :sourcename
        ///  DO BEGIN
        ///    UPDATE OR INSERT INTO SOURCEDOC (SourceDocCD, PayMethodCD, SourceDocNM, ExtOrgCD, ISSubs, SHOWASSUBSIDY )
        ///        VALUES (:SOURCECD, 1, :SOURCENAME, 1, 0, 0) MATCHING (SourceDocCD);
        ///  END
        ///  E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01300_SOURCEDOC {
            get {
                return ResourceManager.GetString("CNV_CNV_01300_SOURCEDOC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01400_OPLATA
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable DOCUMENTCD varchar(20);
        ///declare variable MONTH_ integer;
        ///declare variable YEAR_ integer;
        ///declare variable SUMMA numeric(18,2);
        ///declare variable DATE_ timestamp;
        ///declare variable DATE_VV timestamp;
        ///declare variable SOURCECD integer;
        ///declare variable SERVICECD integer;
        ///declare variable DVDAY integer;
        ///declare variable DVMONTH integer;
        ///declare variable DVYEAR integer;
        ///declare variable DDAY inte [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01400_OPLATA {
            get {
                return ResourceManager.GetString("CNV_CNV_01400_OPLATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01500_SALDO (
        ///    CURRENTYEAR integer,
        ///    CURRENTMONTH integer)
        ///as
        ///declare variable YEAR_ integer;
        ///declare variable MONTH_ integer;
        ///declare variable SERVICECD integer;
        ///declare variable LSHET varchar(10);
        ///declare variable BDEBET numeric(18,4);
        ///declare variable EDEBET numeric(18,4);
        ///declare variable DATE_ date;
        ///begin
        ///  EXECUTE STATEMENT &apos;ALTER trigger saldocheckinsert inactive&apos;;
        ///  EXECUTE STATEMENT &apos;ALTER trigger saldocheckupdate inactive&apos;;
        ///  for SELECT YEAR_,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01500_SALDO {
            get {
                return ResourceManager.GetString("CNV_CNV_01500_SALDO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01600_NACHISLIMPORT
        ///as
        ///declare variable YEAR_ integer;
        ///declare variable MONTH_ integer;
        ///declare variable YEAR2 integer;
        ///declare variable MONTH2 integer;
        ///declare variable LSHET varchar(10);
        ///declare variable FNATH numeric(18,4);
        ///declare variable VOLUME numeric(18,4);
        ///declare variable REGIMCD integer;
        ///declare variable SERVICECD integer;
        ///declare variable DATE_ date;
        ///declare variable FYEAR integer;
        ///declare variable FMONTH integer;
        ///declare variable F [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01600_NACHISLIMPORT {
            get {
                return ResourceManager.GetString("CNV_CNV_01600_NACHISLIMPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01700_PERERASHETIMPORT
        ///as
        ///declare variable YEAR_ integer;
        ///declare variable MONTH_ integer;
        ///declare variable YEAR2 integer;
        ///declare variable MONTH2 integer;
        ///declare variable LSHET varchar(10);
        ///declare variable PROCHL numeric(18,4);
        ///declare variable PROCHLVOLUME numeric(18,4);
        ///declare variable REGIMCD integer;
        ///declare variable SERVICECD integer;
        ///declare variable FYEAR integer;
        ///declare variable FMONTH integer;
        ///declare variable FDAY integer;
        ///declar [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01700_PERERASHETIMPORT {
            get {
                return ResourceManager.GetString("CNV_CNV_01700_PERERASHETIMPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01800_CITIZENS (
        ///	GENERATEID smallint = 1)
        ///as
        ///declare variable LSHET varchar(10) = null;
        ///declare variable ISMAINCITYZEN integer = null;
        ///declare variable PASPORTNO varchar(50) = null;
        ///declare variable PASPORTSR varchar(20) = null;
        ///declare variable PASSPORTDATE timestamp = null;
        ///declare variable DORGNAME varchar(1000) = null;
        ///declare variable DORGCD integer = null;
        ///declare variable DOCTYPEID integer = null;
        ///declare variable F varchar(30) = null;
        ///de [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01800_CITIZENS {
            get {
                return ResourceManager.GetString("CNV_CNV_01800_CITIZENS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01810_CITIZENRELATIONS
        ///as
        ///declare variable CITIZENIDFROM integer;
        ///declare variable CITIZENIDTO integer;
        ///declare variable RELATIONID integer = null;
        ///begin
        ///    for select c1.cityzen_id, c2.cityzen_id, cr.relationid
        ///    from cnv$citizenrelations cr
        ///    inner join cityzens c1 on c1.uniquecityzenid = cast(cr.citizenidfrom as varchar(45))
        ///    inner join cityzens c2 on c2.uniquecityzenid = cast(cr.citizenidto as varchar(45))
        ///    order by cr.citizenidfrom        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01810_CITIZENRELATIONS {
            get {
                return ResourceManager.GetString("CNV_CNV_01810_CITIZENRELATIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01820_CITIZENMIGRATION (
        ///    USEUNIQUEID smallint = 1)
        ///as
        ///declare variable LASTCITIZENID integer;
        ///declare variable CITIZENID varchar(45);
        ///declare variable DATE_ timestamp;
        ///declare variable DIRECTION integer;
        ///declare variable MIGRATION integer;
        ///begin
        ///  for select CCM.CITIZENID, CCM.DATE_, CCM.DIRECTION, CCM.MIGRATIONTYPE
        ///      from CNV$CITIZENMIGRATION CCM
        ///      into :CITIZENID, :DATE_, :DIRECTION, :MIGRATION
        ///  do
        ///  begin
        ///    if (:USEUNIQUEID =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01820_CITIZENMIGRATION {
            get {
                return ResourceManager.GetString("CNV_CNV_01820_CITIZENMIGRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_01900_PENISUMMA
        ///as
        ///declare variable SERVICECD integer;
        ///declare variable LSHET varchar(10);
        ///declare variable FDATE timestamp;
        ///declare variable FDAY integer;
        ///declare variable FMONTH integer;
        ///declare variable FYEAR integer;
        ///declare variable ABONENTSALDO numeric(18,4);
        ///declare variable PENINACHISLSUMMA numeric(18,4);
        ///declare variable ISCONTROLPOINT integer;
        ///declare variable NDATE timestamp;
        ///declare variable IZMEN integer;
        ///declare variable BASEORG in [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_01900_PENISUMMA {
            get {
                return ResourceManager.GetString("CNV_CNV_01900_PENISUMMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_02100_EXTLSHETS (
        ///    EXTORGCD4EXTLSHET integer,
        ///    EXTORGCD4EXTLSHET2 integer)
        ///as
        ///declare variable LSHET varchar(10);
        ///declare variable EXTLSHET varchar(20);
        ///BEGIN
        ///  FOR SELECT lshet, extlshet
        ///    FROM cnv$abonent
        ///    WHERE (extlshet IS NOT NULL)
        ///    INTO :lshet, :extlshet DO BEGIN
        ///    UPDATE OR INSERT INTO extorgaccounts (extorgcd, lshet, extlshet) VALUES (:extorgcd4extlshet, :lshet, :extlshet);
        ///  END
        ///  FOR SELECT lshet, extlshet2
        ///    FROM cnv$abonent
        ///    WH [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_02100_EXTLSHETS {
            get {
                return ResourceManager.GetString("CNV_CNV_02100_EXTLSHETS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_03000_CITIZENS_KVC (
        ///    NEEDDELETE smallint)
        ///as
        ///declare variable LSHET varchar(10) = null;
        ///declare variable F varchar(50) = null;
        ///declare variable O varchar(50) = null;
        ///declare variable I varchar(50) = null;
        ///declare variable ISMAIN integer = null;
        ///declare variable SOBSTAT integer = null;
        ///declare variable CITSTAT integer = null;
        ///declare variable DOLYA integer = null;
        ///declare variable C_HIDDEN integer = null;
        ///declare variable C_OSHIPNUM integer =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03000_CITIZENS_KVC {
            get {
                return ResourceManager.GetString("CNV_CNV_03000_CITIZENS_KVC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_03000_CITIZENS_TVER (
        ///    NEEDDELETE smallint)
        ///as
        ///declare variable ISOWNER varchar(1) = null;
        ///declare variable ISLIVING varchar(1) = null;
        ///declare variable ISREGISTRED varchar(1) = null;
        ///declare variable EMAIL varchar(100) = null;
        ///declare variable PHONE varchar(100) = null;
        ///declare variable ENDDATE timestamp = null;
        ///declare variable STARTDATE timestamp = null;
        ///declare variable UNIQUECITYZENID varchar(45) = null;
        ///declare variable F varchar(50) = nu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03000_CITIZENS_TVER {
            get {
                return ResourceManager.GetString("CNV_CNV_03000_CITIZENS_TVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///create or alter procedure CNV$CNV_03050_CITIZENSMIGR_TVER (
        ///    NEEDDELETE smallint)
        ///as
        ///declare variable CITYZENID integer = null;
        ///declare variable MIGRATIONDATE timestamp = null;
        ///declare variable MIGRATIONTYPE integer = null;
        ///declare variable DIRECTION integer = null;
        ///declare variable DOCUMENTCD integer = null;
        ///begin
        ///  if (NEEDDELETE = 1) then
        ///  begin
        ///    delete from CITYZENMIGRATION
        ///    where CITYZEN_ID in (select distinct CITIZENID
        ///                         from CNV$CITIZENMIGRA [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03050_CITIZENSMIGR_TVER {
            get {
                return ResourceManager.GetString("CNV_CNV_03050_CITIZENSMIGR_TVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///create or alter procedure CNV$CNV_03100_TVER_ABONENTDOLYA (
        ///    NEEDDELETE smallint = 0)
        ///as
        ///declare variable CURHOUSECD integer;
        ///declare variable PREHOUSECD integer;
        ///declare variable ABONENTSQUARE numeric(11,4);
        ///declare variable HOUSETOTALSQUARE numeric(11,4);
        ///declare variable HOUSEHEATINGSQUARE numeric(11,4);
        ///declare variable DOCUMENTCD integer;
        ///declare variable DATE_ timestamp;
        ///declare variable LSHET varchar(10);
        ///declare variable CLOSEDATE timestamp;
        ///begin
        ///  if (NEEDDELETE = 1)  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03100_TVER_ABONENTDOLYA {
            get {
                return ResourceManager.GetString("CNV_CNV_03100_TVER_ABONENTDOLYA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///create or alter procedure CNV$CNV_03200_CITYZENLGOTA_TVER (
        ///    NEEDDELETE smallint)
        ///as
        ///declare variable CITYZENID integer;
        ///declare variable LGOTACD integer;
        ///declare variable STARTDATE timestamp;
        ///declare variable ENDDATE timestamp;
        ///declare variable ISDELETED integer;
        ///declare variable PRIORITY integer;
        ///declare variable DOCUMENTCD integer;
        ///begin
        ///  if (NEEDDELETE = 1) then
        ///  begin
        ///    delete from CITYZENLGOTA
        ///    where CITYZEN_ID in (select CITYZENID
        ///                         from C [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03200_CITYZENLGOTA_TVER {
            get {
                return ResourceManager.GetString("CNV_CNV_03200_CITYZENLGOTA_TVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///create or alter procedure CNV$CNV_03300_LGOTSUMMA
        ///as
        ///declare variable YEAR_ integer;
        ///declare variable MONTH_ integer;
        ///declare variable YEAR2 integer;
        ///declare variable MONTH2 integer;
        ///declare variable LSHET varchar(10);
        ///declare variable SUMMA numeric(18,4);
        ///declare variable REGIMCD integer;
        ///declare variable SERVICECD integer;
        ///declare variable DATE_ date;
        ///declare variable FYEAR integer;
        ///declare variable FMONTH integer;
        ///declare variable FDAY integer;
        ///declare variable DOCUMENTCD varc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_03300_LGOTSUMMA {
            get {
                return ResourceManager.GetString("CNV_CNV_03300_LGOTSUMMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET TERM ^ ;
        ///
        ///create or alter procedure CNV$CNV_DOCUMENTNUMERATOR (
        ///    IMPORTKEY varchar(20),
        ///    DOCNAME varchar(150),
        ///    DOCDATE date,
        ///    INPUTDATE date,
        ///    BASEORG integer)
        ///returns (
        ///    DOCUMENTCD integer)
        ///as
        ///BEGIN
        ///  if (importkey = &apos;&apos;) then
        ///  begin
        ///        select gen_id(documents_gen, 1) from RDB$DATABASE into :documentcd;
        ///        INSERT INTO DOCUMENTS (DOCUMENTCD, ORGANIZATIONCD, REGISTERUSERCD, OTVETSTVUSERCD, DOCTYPEID, DOCNAME, DOCDATE, INPUTDATE)
        ///        VALUES (:documentcd, :baseorg, 1, 1, 9, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_CNV_DOCUMENTNUMERATOR {
            get {
                return ResourceManager.GetString("CNV_CNV_DOCUMENTNUMERATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /******************************************************************************/
        ////***               Generated by IBExpert 30.06.2015 23:21:29                ***/
        ////******************************************************************************/
        ///
        ////******************************************************************************/
        ////***      Following SET SQL DIALECT is just for the Database Comparer       ***/
        ////******************************************************************************/
        ////* SET SQL DIALECT 3; */
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_COUNTERS {
            get {
                return ResourceManager.GetString("CNV_COUNTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$COUNTERS_BI;
        ///DROP SEQUENCE GEN_CNV$COUNTERS_ID;
        ///DROP INDEX CNV$COUNTERS_IDX1;
        ///DROP INDEX CNV$COUNTERS_IDX2;
        ///DROP TABLE CNV$COUNTERS;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_COUNTERS_d {
            get {
                return ResourceManager.GetString("CNV_COUNTERS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /******************************************************************************/
        ////***               Generated by IBExpert 30.06.2015 23:21:29                ***/
        ////******************************************************************************/
        ///
        ////******************************************************************************/
        ////***      Following SET SQL DIALECT is just for the Database Comparer       ***/
        ////******************************************************************************/
        ////* SET SQL DIALECT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_COUNTERTYPES {
            get {
                return ResourceManager.GetString("CNV_COUNTERTYPES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$COUNTERTYPES_BI;
        ///DROP TRIGGER cnv$countertypes_digitscheck;
        ///DROP SEQUENCE GEN_CNV$COUNTERTYPES_ID;
        ///DROP TABLE CNV$COUNTERTYPES;.
        /// </summary>
        internal static string CNV_COUNTERTYPES_d {
            get {
                return ResourceManager.GetString("CNV_COUNTERTYPES_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$DOCUMENTNUMERATORTABLE  (
        ///    DOCUMENTCD  INTEGER NOT NULL,
        ///    IMPORTKEY   VARCHAR(20) NOT NULL
        ///);
        ///ALTER TABLE CNV$DOCUMENTNUMERATORTABLE ADD PRIMARY KEY (IMPORTKEY);
        ///CREATE UNIQUE INDEX CNV$DOCUMENTNUMERATORTABLE_IDX1 ON CNV$DOCUMENTNUMERATORTABLE (DOCUMENTCD); 
        ///
        ///.
        /// </summary>
        internal static string CNV_DOCUMENTNUMERATORTABLE {
            get {
                return ResourceManager.GetString("CNV_DOCUMENTNUMERATORTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP INDEX CNV$DOCUMENTNUMERATORTABLE_IDX1;
        ///DROP TABLE CNV$DOCUMENTNUMERATORTABLE;
        ///.
        /// </summary>
        internal static string CNV_DOCUMENTNUMERATORTABLE_d {
            get {
                return ResourceManager.GetString("CNV_DOCUMENTNUMERATORTABLE_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP INDEX CNV$DOCUMENTNUMERATORTABLE_IDX1;
        ///DROP TABLE CNV$DOCUMENTNUMERATORTABLE;
        ///.
        /// </summary>
        internal static string CNV_DOCUMENTNUMERATORTABLE_d1 {
            get {
                return ResourceManager.GetString("CNV_DOCUMENTNUMERATORTABLE_d1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$DOCUMENTNUMERATORTABLE  (
        ///    DOCUMENTCD  INTEGER NOT NULL,
        ///    IMPORTKEY   VARCHAR(20) NOT NULL
        ///);
        ///ALTER TABLE CNV$DOCUMENTNUMERATORTABLE ADD PRIMARY KEY (IMPORTKEY);
        ///CREATE UNIQUE INDEX CNV$DOCUMENTNUMERATORTABLE_IDX1 ON CNV$DOCUMENTNUMERATORTABLE (DOCUMENTCD); 
        ///
        ///.
        /// </summary>
        internal static string CNV_DOCUMENTNUMERATORTABLE1 {
            get {
                return ResourceManager.GetString("CNV_DOCUMENTNUMERATORTABLE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$DOGOVOR (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10),
        ///  DOGTYPEKOD INTEGER,
        ///  DOGTYPENAM varchar(50),
        ///  DESCRIPTIO varchar(100),
        ///  STARTDATE timestamp,
        ///  ENDDATE timestamp,
        ///  SERIA varchar(12),
        ///  NOMER varchar(12),
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$DOGOVOR_IDX1 ON CNV$DOGOVOR (LSHET);
        ///CREATE SEQUENCE GEN_CNV$DOGOVOR_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$DOGOVOR_BI FOR CNV$DOGOVOR
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$DOGOVOR_ID,1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_DOGOVOR {
            get {
                return ResourceManager.GetString("CNV_DOGOVOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$DOGOVOR_BI;
        ///DROP SEQUENCE GEN_CNV$DOGOVOR_ID;
        ///DROP INDEX CNV$DOGOVOR_IDX1;
        ///DROP TABLE CNV$DOGOVOR;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_DOGOVOR_d {
            get {
                return ResourceManager.GetString("CNV_DOGOVOR_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$EQUIPMENT (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10),
        ///  GROUPKOD INTEGER,
        ///  GROUPNAME varchar(50),
        ///  MARKKOD INTEGER,
        ///  MARKNAME varchar(50),
        ///  SETUPDATE timestamp,
        ///  SERIALNUM varchar(30),
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$EQUIPMENT_IDX1 ON CNV$EQUIPMENT (LSHET);
        ///CREATE SEQUENCE GEN_CNV$EQUIPMENT_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$EQUIPMENT_BI FOR CNV$EQUIPMENT
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$EQUIPMENT_ID,1);
        ///END
        ///^
        ///SE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_EQUIPMENT {
            get {
                return ResourceManager.GetString("CNV_EQUIPMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$EQUIPMENT_BI;
        ///DROP SEQUENCE GEN_CNV$EQUIPMENT_ID;
        ///DROP INDEX CNV$EQUIPMENT_IDX1;
        ///DROP TABLE CNV$EQUIPMENT;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_EQUIPMENT_d {
            get {
                return ResourceManager.GetString("CNV_EQUIPMENT_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$GCOUNTER (
        ///  ID INTEGER NOT NULL,
        ///  COUNTERID varchar(20),
        ///  LSHET varchar(10),
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$GCOUNTER_IDX1 ON CNV$GCOUNTER (LSHET);
        ///CREATE SEQUENCE GEN_CNV$GCOUNTER_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$GCOUNTER_BI FOR CNV$GCOUNTER
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$GCOUNTER_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_GCOUNTER {
            get {
                return ResourceManager.GetString("CNV_GCOUNTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$GCOUNTER_BI;
        ///DROP SEQUENCE GEN_CNV$GCOUNTER_ID;
        ///DROP INDEX CNV$GCOUNTER_IDX1;
        ///DROP TABLE CNV$GCOUNTER;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_GCOUNTER_d {
            get {
                return ResourceManager.GetString("CNV_GCOUNTER_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$HADDCHAR (
        ///  ID INTEGER NOT NULL,
        ///  HOUSECD INTEGER,
        ///  ADDCHARCD INTEGER,
        ///  VALUE_ varchar(2000),
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE SEQUENCE GEN_CNV$HADDCHAR_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$HADDCHAR_BI FOR CNV$HADDCHAR
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$HADDCHAR_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_HADDCHAR {
            get {
                return ResourceManager.GetString("CNV_HADDCHAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$HADDCHAR_BI;
        ///DROP SEQUENCE GEN_CNV$HADDCHAR_ID;
        ///DROP TABLE CNV$HADDCHAR;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_HADDCHAR_d {
            get {
                return ResourceManager.GetString("CNV_HADDCHAR_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$LCHARHOUSES (
        ///  ID INTEGER NOT NULL,
        ///  HOUSECD INTEGER,
        ///  LCHARCD INTEGER,
        ///  LCHARNAME varchar(100),
        ///  VALUE_ INTEGER,
        ///  VALUEDESC varchar(100),
        ///  DATE_ TIMESTAMP,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE SEQUENCE GEN_CNV$LCHARHOUSES_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$LCHARHOUSES_BI FOR CNV$LCHARHOUSES
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$LCHARHOUSES_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_LCHARHOUSES {
            get {
                return ResourceManager.GetString("CNV_LCHARHOUSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$LCHARHOUSES_BI;
        ///DROP SEQUENCE GEN_CNV$LCHARHOUSES_ID;
        ///DROP TABLE CNV$LCHARHOUSES;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_LCHARHOUSES_d {
            get {
                return ResourceManager.GetString("CNV_LCHARHOUSES_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$LCHARS (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10),
        ///  LCHARCD INTEGER,
        ///  LCHARNAME varchar(100),
        ///  VALUE_ INTEGER,
        ///  VALUEDESC varchar(100),
        ///  DATE_ TIMESTAMP,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$LCHARS_IDX1 ON CNV$LCHARS (LSHET);
        ///CREATE SEQUENCE GEN_CNV$LCHARS_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$LCHARS_BI FOR CNV$LCHARS
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$LCHARS_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_LCHARS {
            get {
                return ResourceManager.GetString("CNV_LCHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$LCHARS_BI;
        ///DROP SEQUENCE GEN_CNV$LCHARS_ID;
        ///DROP INDEX CNV$LCHARS_IDX1;
        ///DROP TABLE CNV$LCHARS;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_LCHARS_d {
            get {
                return ResourceManager.GetString("CNV_LCHARS_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$LGOTSUMMA (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10) NOT NULL,
        ///  CITYZENID INTEGER NOT NULL,
        ///  LGOTACD INTEGER NOT NULL,
        ///  LGOTANAME VARCHAR(100),
        ///  REGIMCD INTEGER NOT NULL,
        ///  REGIMNAME varchar(50) NOT NULL,
        ///  SERVICECD INTEGER NOT NULL,
        ///  SERVICENAME varchar(50) NOT NULL,
        ///  SUMMA NUMERIC(18,4) NOT NULL,
        ///  MONTH_ INTEGER NOT NULL,
        ///  YEAR_ INTEGER NOT NULL,
        ///  MONTH2 INTEGER NOT NULL,
        ///  YEAR2 INTEGER NOT NULL,
        ///  DATE_VV timestamp NOT NULL,
        ///  TYPE_ INTEGER NOT NULL,
        ///  COUNTERCD INTEGER,
        ///  S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_LGOTSUMMA {
            get {
                return ResourceManager.GetString("CNV_LGOTSUMMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$LGOTSUMMA_BI;
        ///DROP SEQUENCE GEN_CNV$LGOTSUMMA_ID;
        ///DROP INDEX CNV$LGOTSUMMA_IDX1;
        ///DROP TABLE CNV$LGOTSUMMA;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_LGOTSUMMA_d {
            get {
                return ResourceManager.GetString("CNV_LGOTSUMMA_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$NACH (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10) NOT NULL,
        ///  DOCUMENTCD varchar(20) NOT NULL,
        ///  MONTH_ INTEGER NOT NULL,
        ///  YEAR_ INTEGER NOT NULL,
        ///  MONTH2 INTEGER NOT NULL,
        ///  YEAR2 INTEGER NOT NULL,
        ///  FNATH NUMERIC(18,4) NOT NULL,
        ///  PROCHL NUMERIC(18,4) NOT NULL,
        ///  PROCHLVOLUME NUMERIC(18,4) NOT NULL,
        ///  VOLUME NUMERIC(18,4) NOT NULL,
        ///  REGIMCD INTEGER NOT NULL,
        ///  REGIMNAME varchar(50) NOT NULL,
        ///  SERVICECD INTEGER NOT NULL,
        ///  SERVICENAME varchar(50) NOT NULL,
        ///  DATE_VV timestamp NOT NULL, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_NACH {
            get {
                return ResourceManager.GetString("CNV_NACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$NACH_BI;
        ///DROP SEQUENCE GEN_CNV$NACH_ID;
        ///DROP INDEX CNV$NACH_IDX1;
        ///DROP TABLE CNV$NACH;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_NACH_d {
            get {
                return ResourceManager.GetString("CNV_NACH_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$NACHOPL (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10) NOT NULL,
        ///  MONTH_ INTEGER NOT NULL,
        ///  YEAR_ INTEGER NOT NULL,
        ///  MONTH2 INTEGER NOT NULL,
        ///  YEAR2 INTEGER NOT NULL,
        ///  BDEBET NUMERIC(18,4) NOT NULL,
        ///  FNATH NUMERIC(18,4) NOT NULL,
        ///  PROCHL NUMERIC(18,4) NOT NULL,
        ///  OPLATA NUMERIC(18,2) NOT NULL,
        ///  EDEBET NUMERIC(18,4) NOT NULL,
        ///  SERVICECD INTEGER NOT NULL,
        ///  SERVICENAME varchar(50) NOT NULL,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$NACHOPL_IDX1 ON CNV$NACHOPL (LSHET);
        ///CREATE SEQUENCE GEN_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_NACHOPL {
            get {
                return ResourceManager.GetString("CNV_NACHOPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$NACHOPL_BI;
        ///DROP SEQUENCE GEN_CNV$NACHOPL_ID;
        ///DROP INDEX CNV$NACHOPL_IDX1;
        ///DROP TABLE CNV$NACHOPL;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_NACHOPL_d {
            get {
                return ResourceManager.GetString("CNV_NACHOPL_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$OPLATA (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10) NOT NULL,
        ///  DOCUMENTCD varchar(20) NOT NULL,
        ///  MONTH_ INTEGER NOT NULL,
        ///  YEAR_ INTEGER NOT NULL,
        ///  SUMMA NUMERIC(18,2) NOT NULL,
        ///  DATE_ timestamp NOT NULL,
        ///  DATE_VV timestamp NOT NULL,
        ///  SOURCECD INTEGER NOT NULL,
        ///  SOURCENAME varchar(50) NOT NULL,
        ///  SERVICECD INTEGER NOT NULL,
        ///  SERVICENAME varchar(50) NOT NULL,
        ///  PRIM_ varchar(100) DEFAULT NULL,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$OPLATA_IDX1 ON CNV$OPLATA (LSHET);
        ///CREATE SEQUENCE  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_OPLATA {
            get {
                return ResourceManager.GetString("CNV_OPLATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$OPLATA_BI;
        ///DROP SEQUENCE GEN_CNV$OPLATA_ID;
        ///DROP INDEX CNV$OPLATA_IDX1;
        ///DROP TABLE CNV$OPLATA;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_OPLATA_d {
            get {
                return ResourceManager.GetString("CNV_OPLATA_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$PENI (
        ///  ID INTEGER NOT NULL,
        ///  LSHET VARCHAR(10) NOT NULL,
        ///  SERVICECD INTEGER NOT NULL,
        ///  DOLGDATE TIMESTAMP NOT NULL,
        ///  DOLG NUMERIC(18,4) NOT NULL,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$PENI_IDX1 ON CNV$PENI (LSHET);
        ///CREATE SEQUENCE GEN_CNV$PENI_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$PENI_BI FOR CNV$PENI
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN
        ///  IF (NEW.ID IS NULL) THEN
        ///    NEW.ID = GEN_ID(GEN_CNV$PENI_ID,1);
        ///END
        ///^
        ///SET TERM ; ^
        ///.
        /// </summary>
        internal static string CNV_PENI {
            get {
                return ResourceManager.GetString("CNV_PENI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$PENI_BI;
        ///DROP SEQUENCE GEN_CNV$PENI_ID;
        ///DROP INDEX CNV$PENI_IDX1;
        ///DROP TABLE CNV$PENI;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_PENI_d {
            get {
                return ResourceManager.GetString("CNV_PENI_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$PENISUMMA (
        ///  ID INTEGER NOT NULL,
        ///  SERVICECD INTEGER,
        ///  LSHET VARCHAR(10),
        ///  FDATE Timestamp,
        ///  FDAY integer,
        ///  FMONTH integer,
        ///  FYEAR integer,
        ///  ABONENTSALDO numeric(18,4),
        ///  PENINACHISLSUMMA numeric(18,4),
        ///  ISCONTROLPOINT integer,
        ///  NDATE timestamp,
        ///  IZMEN integer,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$PENISUMMA_IDX1 ON CNV$PENISUMMA (LSHET);
        ///CREATE SEQUENCE GEN_CNV$PENISUMMA_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$PENISUMMA_BI FOR CNV$PENISUMMA
        ///ACTIVE BEFORE INSERT POSITION 0
        ///AS
        ///BEGIN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_PENISUMMA {
            get {
                return ResourceManager.GetString("CNV_PENISUMMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$PENISUMMA_BI;
        ///DROP SEQUENCE GEN_CNV$PENISUMMA_ID;
        ///DROP INDEX CNV$PENISUMMA_IDX1;
        ///DROP TABLE CNV$PENISUMMA;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_PENISUMMA_d {
            get {
                return ResourceManager.GetString("CNV_PENISUMMA_d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE CNV$SUPPLNET (
        ///  ID INTEGER NOT NULL,
        ///  LSHET varchar(10) DEFAULT NULL,
        ///  SERVICECD INTEGER DEFAULT NULL,
        ///  KNOTL1CD INTEGER DEFAULT NULL,
        ///  KNOTL1NAME varchar(100) DEFAULT NULL,
        ///  KNOTL2CD INTEGER DEFAULT NULL,
        ///  KNOTL2NAME varchar(100) DEFAULT NULL,
        ///  SUPPDATE timestamp DEFAULT NULL,
        ///  CONNECTED SMALLINT DEFAULT NULL,
        ///  PRIMARY KEY (ID)
        ///);
        ///CREATE INDEX CNV$SUPPLNET_IDX1 ON CNV$SUPPLNET (LSHET);
        ///CREATE SEQUENCE GEN_CNV$SUPPLNET_ID;
        ///
        ///SET TERM ^ ;
        ///CREATE TRIGGER CNV$SUPPLNET_BI FOR CNV$SUPPLNET
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNV_SUPPLNET {
            get {
                return ResourceManager.GetString("CNV_SUPPLNET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TRIGGER CNV$SUPPLNET_BI;
        ///DROP SEQUENCE GEN_CNV$SUPPLNET_ID;
        ///DROP INDEX CNV$SUPPLNET_IDX1;
        ///DROP TABLE CNV$SUPPLNET;
        ///
        ///
        ///.
        /// </summary>
        internal static string CNV_SUPPLNET_d {
            get {
                return ResourceManager.GetString("CNV_SUPPLNET_d", resourceCulture);
            }
        }
    }
}
